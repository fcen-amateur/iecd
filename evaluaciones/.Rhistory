mi_kde <- hacer_kde(x, h=bw.nrd0(x))
plot(sop, su_kde$y, type="n", xlab="X", ylab="Densidad Estimada",)
for (name in names(hs)) {
lines(sop, hacer_kde(x, hs[[name]])(sop), type="l", col=colores[name])
}
legend(3.8, 0.3, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
ll <- ret$loglikes[ret$j.opt]
ll.se <- ret$loglikes.se[ret$j.opt]
n.x <- length(x)
lls <- c(
"loocv"=ll,
"1SE"= ll - ll.se / sqrt(n.x),
"2SE"= ll - 2 * ll.se / sqrt(n.x)
)
hs["1SE"] <- ret$h.nSE
hs["2SE"] <- bw.loocv(x, n.se=2)$h.nSE
plot(log(ret$grilla.h), ret$loglikes, type="l", ylab="Log-Verosimilitud Media", xlab="log(h)")
# Repito 5.a para todos los estimadores
su_kde <- density(x)
sop = su_kde$x # density calcula un soporte conveniente para el kde
mi_kde <- hacer_kde(x, h=bw.nrd0(x))
plot(sop, su_kde$y, type="n", xlab="X", ylab="Densidad Estimada")
for (name in names(hs)) {
lines(sop, hacer_kde(x, hs[[name]])(sop), type="l", col=colores[name])
}
legend(3.8, 0.3, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
ret
hacer_kde <- function(x, h=1) {
kde <- function(t) {
ret <- vector("numeric", length(t))
for (i in seq_along(t)) {
ret[i] <- (1 / h) * mean(dnorm((t[i] - x) / h))
}
return(ret)
}
}
bw.loocv <- function(x, grilla.h=NA, n.se=1) {
if (any(is.na(grilla.h))) {
grilla.h <- bw.nrd0(x) * exp(seq(-2, 2, length.out=100))
}
n.h <- length(grilla.h)
n.x <- length(x)
loglikes <- vector("numeric", n.h)
loglikes.se <- vector("numeric", n.h)
for(j in 1:n.h) {
h_j <- grilla.h[j]
lls = vector("numeric", n.x)  # l(log)l(ikelihood)s de cada estimador LOOCV
for (i in 1:n.x) {
loo_kde <- hacer_kde(x[-i], h_j)
lls[i] = log(loo_kde(x[i]))
}
loglikes[j] <- mean(lls)
loglikes.se[j] <- sd(lls)
}
j.opt=which.max(loglikes)
h.CV=grilla.h[j.opt]
h.nSE=max(
grilla.h[
loglikes >= loglikes[j.opt] - n.se * loglikes.se[j.opt] / sqrt(n.x)
]
)
return(
list(
grilla.h=grilla.h,
loglikes=loglikes,
loglikes.se=loglikes.se,
h.CV=h.CV,
h.nSE=h.nSE,
n.se=n.se,
j.opt=j.opt
)
)
}
muestra <- function(seed=1234, n=200) {
set.seed(seed)
binoms <- rbinom(n, size=1, p=0.75)
return (
binoms * rnorm(n, mean=0, sd=1)
+ (1 - binoms) * rnorm(n, mean=3.25, sd=sqrt(0.5))
)
}
write.table(muestra(1234), "entrega1.txt", row.names=FALSE, col.names=FALSE)
x <- sort(muestra()) # Por practicidad para graficar, no cambia el resultado.
ret <- bw.loocv(x, grilla.h=seq(1, 100) / 100)
hs <- c(nrd0=bw.nrd0(x), SJ=bw.SJ(x), ucv=bw.ucv(x), loocv=ret$h.CV)
colores <- c(nrd0="blue", SJ="red", ucv="green", loocv="darkorange")
plot(log(ret$grilla.h), ret$loglikes, type="l", ylab="Log-Verosimilitud Media", xlab="log(h)")
for (name in names(hs)) {
abline(v=log(hs[[name]]), col=colores[name])
}
etiquetas <- function(hs) { paste0(names(hs), " (h=", round(hs, 3), ")")}
legend(-2.5, -2.1, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
x <- sort(muestra()) # Por practicidad para graficar, no cambia el resultado.
ret <- bw.loocv(x)
hs <- c(nrd0=bw.nrd0(x), SJ=bw.SJ(x), ucv=bw.ucv(x), loocv=ret$h.CV)
colores <- c(nrd0="blue", SJ="red", ucv="green", loocv="darkorange")
plot(log(ret$grilla.h), ret$loglikes, type="l", ylab="Log-Verosimilitud Media", xlab="log(h)")
for (name in names(hs)) {
abline(v=log(hs[[name]]), col=colores[name])
}
etiquetas <- function(hs) { paste0(names(hs), " (h=", round(hs, 3), ")")}
legend(-2.5, -2.1, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
# 5.a
su_kde <- density(x)
sop = su_kde$x # density calcula un soporte conveniente para el kde
mi_kde <- hacer_kde(x, h=bw.nrd0(x))
plot(sop, su_kde$y, type="n", xlab="X", ylab="Densidad Estimada",)
for (name in names(hs)) {
lines(sop, hacer_kde(x, hs[[name]])(sop), type="l", col=colores[name])
}
legend(3.8, 0.3, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
ll <- ret$loglikes[ret$j.opt]
ll.se <- ret$loglikes.se[ret$j.opt]
n.x <- length(x)
lls <- c(
"loocv"=ll,
"1SE"= ll - ll.se / sqrt(n.x),
"2SE"= ll - 2 * ll.se / sqrt(n.x)
)
hs["1SE"] <- ret$h.nSE
hs["2SE"] <- bw.loocv(x, n.se=2)$h.nSE
plot(log(ret$grilla.h), ret$loglikes, type="l", ylab="Log-Verosimilitud Media", xlab="log(h)")
colores["1SE"] <- "pink"
colores["2SE"] <- "lightpink"
for (name in names(hs)) {
abline(h=lls[name], col=colores[name], lty=2)
abline(v=log(hs[name]), col=colores[name], lty=1)
}
legend(x=-2.75, y=-2, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
# Repito 5.a para todos los estimadores
su_kde <- density(x)
sop = su_kde$x # density calcula un soporte conveniente para el kde
mi_kde <- hacer_kde(x, h=bw.nrd0(x))
plot(sop, su_kde$y, type="n", xlab="X", ylab="Densidad Estimada")
for (name in names(hs)) {
lines(sop, hacer_kde(x, hs[[name]])(sop), type="l", col=colores[name])
}
legend(3.8, 0.3, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
bw.loocv = function(x, grilla.h = NA, K = dnorm) {
n <- length(x)
if (any(is.na(grilla.h))) {
silverman <- bw.nrd0(x)
grilla.h <- seq(silverman * 10^(-2), silverman * 10^2, length.out = 100)
}
f = matrix(NA, n, length(grilla.h))
for (i in 1:n) {
for (h in 1:length(grilla.h)) {
f[i, h] = sum(K((x[i] - x) / grilla.h[h]))
f[i,h] <- f[i,h] - K(0)
f[i,h] <- f[i,h] /  ((n-1)*grilla.h[h])
}
}
loglikes = colMeans(log(f))
return(list("h.CV" = grilla.h[which.max(loglikes)], "grilla.h" = grilla.h, "loglikes" = loglikes))
}
x = read.table("entrega1.txt")[[1]]
unigauss = bw.loocv(x, seq(0.1, 1, 0.001))
epanechnikov = bw.loocv(x, seq(0.1, 1, 0.001), function(y) ifelse(abs(y) <= 1, 3/4*(1-y^2), 0))
uniforme = bw.loocv(x, seq(0.1, 1, 0.001), function(y) ifelse(abs(y) <= 1, 1/2, 0))
data <- data.frame(grilla = unigauss$grilla.h,
gauss = unigauss$loglikes,
epanechnikov = epanechnikov$loglikes,
uniforme = uniforme$loglikes)
colnames(data) <- c('grilla', 'gauss', 'epanechnikov', 'uniforme')
head(data)
library("ggplot2")
ggplot(data) + geom_point(aes(grilla, gauss)) +
geom_vline(aes(xintercept = unigauss$h.CV), color = 'red') +
geom_vline(aes(xintercept = bw.nrd0(x))) +
geom_vline(aes(xintercept = bw.SJ(x))) +
geom_vline(aes(xintercept = bw.ucv(x))) + labs(x = 'h', y = 'loglikes') +
annotate("text", x=unigauss$h.CV+0.015, y=-1.85, label="loocv", angle=90, color = 'red', hjust=0) +
annotate("text", x=bw.nrd0(x)-0.015, y=-1.85, label="Silverman", angle=90, hjust=0) +
annotate("text", x=bw.SJ(x)-0.015, y=-1.85, label="Sheather & Jones", angle=90, hjust=0) +
annotate("text", x=bw.ucv(x)-0.015, y=-1.85, label="VC", angle=90, hjust=0) +
ggtitle("Loglikes de estimador Gaussiano")
unigauss$h.CV
ggplot(data) + geom_linex(aes(grilla, gauss, color = 'Gauss')) +
geom_line(aes(grilla, epanechnikov, color = 'Epanechnikov')) +
geom_line(aes(grilla, uniforme, color = 'Uniforme')) +
labs(color='núcleo', x) + ylab("loglikes") + xlab("h") + ggtitle("Loglikes por núcleo")
ggplot(data) + geom_linex(aes(grilla, gauss, color = 'Gauss')) +
geom_line(aes(grilla, epanechnikov, color = 'Epanechnikov')) +
geom_line(aes(grilla, uniforme, color = 'Uniforme')) +
labs(color='núcleo', x) + ylab("loglikes") + xlab("h") + ggtitle("Loglikes por núcleo")
ggplot(data) + geom_line(aes(grilla, gauss, color = 'Gauss')) +
geom_line(aes(grilla, epanechnikov, color = 'Epanechnikov')) +
geom_line(aes(grilla, uniforme, color = 'Uniforme')) +
labs(color='núcleo', x) + ylab("loglikes") + xlab("h") + ggtitle("Loglikes por núcleo")
h_loocv = unigauss[[1]]
h_nrd0 = bw.nrd0(x)
h_SJ = bw.SJ(x)
h_ucv = bw.ucv(x)
f_h <- function(y, h) {
suma <- 0
for (xi in x) {
suma <- suma + dnorm((y - xi) / h)
}
return(suma/length(x)*h)
}
ggplot() +
geom_function(fun = function(x) return(f_h(x, h_loocv)), aes(color = 'loocv')) +
geom_function(fun = function(x) return(f_h(x, h_nrd0)), aes(color = 'nrd0')) +
geom_function(fun = function(x) return(f_h(x, h_SJ)), aes(color = 'SJ')) +
geom_function(fun = function(x) return(f_h(x, h_ucv)), aes(color = 'ucv')) +
xlim(-3.5,6) + labs(color='h', x) + xlab("x") + ylab("f_h(x)") + ggtitle("Densidades por ventana")
bw.loocv_se = function(x, grilla.h = NA,n.se, K = dnorm) {
n <- length(x)
if (any(is.na(grilla.h))) {
silverman <- bw.nrd0(x)
grilla.h <- seq(silverman * 10^(-2), silverman * 10^2, length.out = 100)
}
f = matrix(NA, n, length(grilla.h))
for (i in 1:n) {
for (h in 1:length(grilla.h)) {
f[i, h] = sum(K((x[i] - x) / grilla.h[h]))
f[i,h] <- f[i,h] - K(0)
f[i,h] <- f[i,h] /  ((n-1)*grilla.h[h])
}
}
loglikes = colMeans(log(f))
h.CV <- grilla.h[which.max(loglikes)]
loglikes.se <- apply(f, 2, sd)
SEh.cv <- loglikes.se[which.max(loglikes)]
h.nSE <- NA
for (i in 1:length(grilla.h)) {
bool <- loglikes[length(grilla.h)+1-i] >= max(loglikes) - n.se*SEh.cv/sqrt(n)
if (bool) {
h.nSE <- grilla.h[length(grilla.h)+1-i]
break
}
}
return(list("h.CV" = h.CV, "grilla.h" = grilla.h, "loglikes" = loglikes, "loglikes.se" = loglikes.se, "h.nSE" = h.nSE, "SEh.cv" = SEh.cv))
}
bw.loocv_se = function(x, grilla.h = NA,n.se, K = dnorm) {
n <- length(x)
if (any(is.na(grilla.h))) {
silverman <- bw.nrd0(x)
grilla.h <- seq(silverman * 10^(-2), silverman * 10^2, length.out = 100)
}
f = matrix(NA, n, length(grilla.h))
for (i in 1:n) {
for (h in 1:length(grilla.h)) {
f[i, h] = sum(K((x[i] - x) / grilla.h[h]))
f[i,h] <- f[i,h] - K(0)
f[i,h] <- f[i,h] /  ((n-1)*grilla.h[h])
}
}
loglikes = colMeans(log(f))
h.CV <- grilla.h[which.max(loglikes)]
loglikes.se <- apply(f, 2, sd)
SEh.cv <- loglikes.se[which.max(loglikes)]
h.nSE <- NA
for (i in 1:length(grilla.h)) {
bool <- loglikes[length(grilla.h)+1-i] >= max(loglikes) - n.se*SEh.cv/sqrt(n)
if (bool) {
h.nSE <- grilla.h[length(grilla.h)+1-i]
break
}
}
return(list("h.CV" = h.CV, "grilla.h" = grilla.h, "loglikes" = loglikes, "loglikes.se" = loglikes.se, "h.nSE" = h.nSE, "SEh.cv" = SEh.cv))
}
unigaussSE0 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 0)
unigaussSE1 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 1)
unigaussSE2 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 2)
SE0 <- unigaussSE0$loglikes[which(unigaussSE0$grilla.h == unigaussSE0$h.CV)]
SE1 <- unigaussSE1$loglikes[which(unigaussSE1$grilla.h == unigaussSE1$h.CV)]  - unigaussSE1$SEh.cv/sqrt(length(x))
SE2 <- unigaussSE2$loglikes[which(unigaussSE2$grilla.h == unigaussSE2$h.CV)]  - 2*unigaussSE2$SEh.cv/sqrt(length(x))
ggplot(data) + geom_point(aes(grilla, gauss, color = grilla == unigaussSE0$h.nSE | grilla == unigaussSE1$h.nSE | grilla == unigaussSE2$h.nSE)) +
geom_hline(aes(yintercept = SE0)) +
geom_hline(aes(yintercept = SE1)) +
geom_hline(aes(yintercept = SE2)) +
annotate("text", x=0.8, y=SE0 + 0.002, label="0 sd", hjust=0) +
annotate("text", x=0.8, y=SE1 + 0.002, label="1 sd", hjust=0) +
annotate("text", x=0.8, y=SE2 + 0.002, label="2 sd", hjust=0) +
theme(legend.position = "none") + ggtitle("Loglikes de Gaussiano con desvíos estandar") + ylab("loglikes")
unigaussSE0
ret$loglikes.se[ret$j.opt]
unigaussSE0 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 0)
unigaussSE1 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 1)
unigaussSE2 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 2)
SE0 <- unigaussSE0$loglikes[which(unigaussSE0$grilla.h == unigaussSE0$h.CV)]
SE1 <- unigaussSE1$loglikes[which(unigaussSE1$grilla.h == unigaussSE1$h.CV)]  - unigaussSE1$SEh.cv/sqrt(length(x))
SE2 <- unigaussSE2$loglikes[which(unigaussSE2$grilla.h == unigaussSE2$h.CV)]  - 2*unigaussSE2$SEh.cv/sqrt(length(x))
ggplot(data) + geom_point(aes(grilla, gauss, color = grilla == unigaussSE0$h.nSE | grilla == unigaussSE1$h.nSE | grilla == unigaussSE2$h.nSE)) +
geom_hline(aes(yintercept = SE0)) +
geom_hline(aes(yintercept = SE1)) +
geom_hline(aes(yintercept = SE2)) +
annotate("text", x=0.8, y=SE0 + 0.002, label="0 sd", hjust=0) +
annotate("text", x=0.8, y=SE1 + 0.002, label="1 sd", hjust=0) +
annotate("text", x=0.8, y=SE2 + 0.002, label="2 sd", hjust=0) +
theme(legend.position = "none") + ggtitle("Loglikes de Gaussiano con desvíos estandar") + ylab("loglikes")
unigaussSE0 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 0)
unigaussSE1 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 1)
unigaussSE2 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 2)
SE0 <- unigaussSE0$loglikes[which(unigaussSE0$grilla.h == unigaussSE0$h.CV)]
SE1 <- unigaussSE1$loglikes[which(unigaussSE1$grilla.h == unigaussSE1$h.CV)]  - unigaussSE1$SEh.cv/sqrt(length(x))
SE2 <- unigaussSE2$loglikes[which(unigaussSE2$grilla.h == unigaussSE2$h.CV)]  - 2*unigaussSE2$SEh.cv/sqrt(length(x))
ggplot(data) + geom_point(aes(grilla, gauss, color = grilla == unigaussSE0$h.nSE | grilla == unigaussSE1$h.nSE | grilla == unigaussSE2$h.nSE)) +
geom_hline(aes(yintercept = SE0)) +
geom_hline(aes(yintercept = SE1)) +
geom_hline(aes(yintercept = SE2)) +
annotate("text", x=0.8, y=SE0 + 0.002, label="0 sd", hjust=0) +
annotate("text", x=0.8, y=SE1 + 0.002, label="1 sd", hjust=0) +
annotate("text", x=0.8, y=SE2 + 0.002, label="2 sd", hjust=0) +
theme(legend.position = "none") + ggtitle("Loglikes de Gaussiano con desvíos estandar") + ylab("loglikes")
ret$loglikes.se[ret$j.opt]
ret$n.se
ret$n.se
ret$h.nSE
ret$loglikes.se[ret$j.opt]
ret$h.CV - ret$loglikes.se[ret$j.opt] / sqrt(length(x))
ret$loglikes[j.opt] - ret$loglikes.se[ret$j.opt] / sqrt(length(x))
ret$loglikes[ret$j.opt] - ret$loglikes.se[ret$j.opt] / sqrt(length(x))
unigaussSE0
hacer_kde(x, h=0.382)
hacer_kde(x, h=0.382)(x)
sd(hacer_kde(x, h=0.382)(x))
ret$loglikes.se[ret$j.opt]
h_j <- 0.382
lls = vector("numeric", n.x)  # l(log)l(ikelihood)s de cada estimador LOOCV
for (i in 1:n.x) {
loo_kde <- hacer_kde(x[-i], h_j)
lls[i] = log(loo_kde(x[i]))
}
loglikes[j] <- mean(lls)
n.x
h_j <- 0.382
lls = vector("numeric", n.x)  # l(log)l(ikelihood)s de cada estimador LOOCV
for (i in 1:n.x) {
loo_kde <- hacer_kde(x[-i], h_j)
lls[i] = log(loo_kde(x[i]))
}
lls
mean(lls)
sd(lls)
unigaussSE1$SEh.cv
bw.loocv_se = function(x, grilla.h = NA,n.se, K = dnorm) {
n <- length(x)
if (any(is.na(grilla.h))) {
silverman <- bw.nrd0(x)
grilla.h <- seq(silverman * 10^(-2), silverman * 10^2, length.out = 100)
}
f = matrix(NA, n, length(grilla.h))
for (i in 1:n) {
for (h in 1:length(grilla.h)) {
f[i, h] = sum(K((x[i] - x) / grilla.h[h]))
f[i,h] <- f[i,h] - K(0)
f[i,h] <- f[i,h] /  ((n-1)*grilla.h[h])
}
}
loglikes = colMeans(log(f))
h.CV <- grilla.h[which.max(loglikes)]
loglikes.se <- apply(f, 1, sd)
SEh.cv <- loglikes.se[which.max(loglikes)]
h.nSE <- NA
for (i in 1:length(grilla.h)) {
bool <- loglikes[length(grilla.h)+1-i] >= max(loglikes) - n.se*SEh.cv/sqrt(n)
if (bool) {
h.nSE <- grilla.h[length(grilla.h)+1-i]
break
}
}
return(list("h.CV" = h.CV, "grilla.h" = grilla.h, "loglikes" = loglikes, "loglikes.se" = loglikes.se, "h.nSE" = h.nSE, "SEh.cv" = SEh.cv))
}
unigaussSE0 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 0)
unigaussSE1 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 1)
unigaussSE2 <- bw.loocv_se(x, seq(0.1, 1, 0.01), 2)
SE0 <- unigaussSE0$loglikes[which(unigaussSE0$grilla.h == unigaussSE0$h.CV)]
SE1 <- unigaussSE1$loglikes[which(unigaussSE1$grilla.h == unigaussSE1$h.CV)]  - unigaussSE1$SEh.cv/sqrt(length(x))
SE2 <- unigaussSE2$loglikes[which(unigaussSE2$grilla.h == unigaussSE2$h.CV)]  - 2*unigaussSE2$SEh.cv/sqrt(length(x))
ggplot(data) + geom_point(aes(grilla, gauss, color = grilla == unigaussSE0$h.nSE | grilla == unigaussSE1$h.nSE | grilla == unigaussSE2$h.nSE)) +
geom_hline(aes(yintercept = SE0)) +
geom_hline(aes(yintercept = SE1)) +
geom_hline(aes(yintercept = SE2)) +
annotate("text", x=0.8, y=SE0 + 0.002, label="0 sd", hjust=0) +
annotate("text", x=0.8, y=SE1 + 0.002, label="1 sd", hjust=0) +
annotate("text", x=0.8, y=SE2 + 0.002, label="2 sd", hjust=0) +
theme(legend.position = "none") + ggtitle("Loglikes de Gaussiano con desvíos estandar") + ylab("loglikes")
if (true) print(4)
if (TRUE) print(4)
1:5
c(1:5)[4,]
bw.loocv <- function(x, grilla.h = NA) {
if (any(is.na(grilla.h))) {
grilla.h <-
seq(
from = bw.nrd0(x) - bw.nrd0(x) * 10,
to = bw.nrd(x) + bw.nrd0(x) * 10,
length.out = 100
)
}
n.h <- length(grilla.h)
n.x <- nrow(x)
loglikes <- rep(NA, n.h)
for (j in 1:n.h) {
h <- grilla.h[j]
log_f_h_act <- rep(NA, n.x)
for (i in 1:n.x) {
evalVentana <- (x[i, ] - x[-i, ]) / h
log_f_h_act[i] <- log((1 / ((n.x - 1) * h)) * sum(dnorm(evalVentana)))
}
loglikes[j] <- mean(log_f_h_act)
}
ind_max <- which.max(loglikes)
h.CV <- grilla.h[ind_max]
return(list(h.CV, grilla.h, loglikes))
}
muestra <- read.table('entrega1.txt')
ventanas <- seq(0.1, 1, by = 0.01)
h_loocv_muestra <- bw.loocv(muestra, ventanas)
plot(
ventanas,
h_loocv_muestra[[3]],
main = "Log-Verosimilitud Promedio",
xlab = "h",
ylab = "mean-log-verosimilitud"
)
vectormuestra <- as.vector(muestra[, 1])
abline(v = h_loocv_muestra[[1]], col = "purple")
abline(v = bw.nrd0(vectormuestra), col = "green")
abline(v = bw.SJ(vectormuestra), col = "hotpink")
abline(v = bw.ucv(vectormuestra), col = "deepskyblue3")
legend(
"topright",
legend = c("loocv", "nrd0", "SJ", "ucv"),
col = c("purple", "green", "hotpink", "deepskyblue3"),
lwd = 2
)
muestra
muestra[1,]
muestra[1,:]
muestra[,1]
muestra[1,]
muestra[1,1]
muestra[-2,]
muestra[]
muestra[,1]
hacer_kde <- function(x, h=1) {
kde <- function(t) {
ret <- vector("numeric", length(t))
for (i in seq_along(t)) {
ret[i] <- (1 / h) * mean(dnorm((t[i] - x) / h))
}
return(ret)
}
}
bw.loocv <- function(x, grilla.h=NA, n.se=1) {
if (any(is.na(grilla.h))) {
grilla.h <- bw.nrd0(x) * exp(seq(-2, 2, length.out=100))
}
n.h <- length(grilla.h)
n.x <- length(x)
loglikes <- vector("numeric", n.h)
loglikes.se <- vector("numeric", n.h)
for(j in 1:n.h) {
h_j <- grilla.h[j]
lls = vector("numeric", n.x)  # l(log)l(ikelihood)s de cada estimador LOOCV
for (i in 1:n.x) {
loo_kde <- hacer_kde(x[-i], h_j)
lls[i] = log(loo_kde(x[i]))
}
loglikes[j] <- mean(lls)
loglikes.se[j] <- sd(lls)
}
j.opt=which.max(loglikes)
h.CV=grilla.h[j.opt]
h.nSE=max(
grilla.h[
loglikes >= loglikes[j.opt] - n.se * loglikes.se[j.opt] / sqrt(n.x)
]
)
return(
list(
grilla.h=grilla.h,
loglikes=loglikes,
loglikes.se=loglikes.se,
h.CV=h.CV,
h.nSE=h.nSE,
n.se=n.se,
j.opt=j.opt
)
)
}
muestra <- function(seed=1234, n=200) {
set.seed(seed)
binoms <- rbinom(n, size=1, p=0.75)
return (
binoms * rnorm(n, mean=0, sd=1)
+ (1 - binoms) * rnorm(n, mean=3.25, sd=sqrt(0.5))
)
}
write.table(muestra(1234), "entrega1.txt", row.names=FALSE, col.names=FALSE)
x <- sort(muestra()) # Por practicidad para graficar, no cambia el resultado.
ret <- bw.loocv(x)
hs <- c(nrd0=bw.nrd0(x), SJ=bw.SJ(x), ucv=bw.ucv(x), loocv=ret$h.CV)
colores <- c(nrd0="blue", SJ="red", ucv="green", loocv="darkorange")
plot(log(ret$grilla.h), ret$loglikes, type="l", ylab="Log-Verosimilitud Media", xlab="log(h)")
for (name in names(hs)) {
abline(v=log(hs[[name]]), col=colores[name])
}
etiquetas <- function(hs) { paste0(names(hs), " (h=", round(hs, 3), ")")}
legend(-2.5, -2.1, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
# 5.a
su_kde <- density(x)
sop = su_kde$x # density calcula un soporte conveniente para el kde
mi_kde <- hacer_kde(x, h=bw.nrd0(x))
plot(sop, su_kde$y, type="n", xlab="X", ylab="Densidad Estimada",)
for (name in names(hs)) {
lines(sop, hacer_kde(x, hs[[name]])(sop), type="l", col=colores[name])
}
legend(3.8, 0.3, legend=etiquetas(hs), col=colores, lty=1, cex=0.8)
